//Mizanur Rahman
//Kanishka Bansal

#include "buffer.h"
#include <pthread.h>
#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>
#include <errno.h>
#include <string.h>
#include <unistd.h>
#include <semaphore.h>

/* the buffer */
static buffer_item buffer[BUFFER_SIZE];

static sem_t full;
static sem_t empty;
/* Mutal exclusion for shared buffer */
static pthread_mutex_t mutex;

static int front, back;

void usage();

int insert_item(buffer_item item);

int remove_item(buffer_item* item);

void *producer(void *param);

void *consumer(void *param);



int main(int argc, char* argv[]) {
    /* 1. Get command line arguments */
    if(argc != 4) {
        usage(argv[0]);
        return 0;
    }
    int exit_timeout = atoi(argv[1]);
    int producer_threads = atoi(argv[2]);
    int consumer_threads = atoi(argv[3]);
    /* Validate command line arguments */
    if(exit_timeout <= 0 || producer_threads <= 0 || consumer_threads <= 0) {
        usage(argv[0]);
        return 0;
    }

    int i, result;

    pthread_attr_t thread_attr; 
    pthread_attr_init(&thread_attr); 
    pthread_attr_setdetachstate(&thread_attr, PTHREAD_CREATE_DETACHED); 
    pthread_t thread;
   
    /* Init semaphores and mutex */
    pthread_mutex_init(&mutex, NULL);
    sem_init(&empty, 0, BUFFER_SIZE);
    sem_init(&full, 0, 0);
    front = 0;
    back = 0;

    /* 2. Initialize buffer */
    memset(&buffer, 0, sizeof(buffer_item) * BUFFER_SIZE);
    /* 3. Create producer thread(s) */
    for(i = 0; i < producer_threads; ++i) {
        result = pthread_create(&thread, &thread_attr, producer, NULL);
        if(result != 0) {
            fprintf(stderr, "Create producer thread failure. Error: %s\n", strerror(errno));
            return -1;
        }
    }
    /* 4. Create consumer thread(s) */
    for(i = 0; i < producer_threads; ++i) {
        result = pthread_create(&thread, &thread_attr, consumer, NULL);
        if(result != 0) {
            fprintf(stderr, "Create consumer thread failure. Error: %s\n", strerror(errno));
            return -1;
        }
    }
    /* 5. Sleep */
    sleep(exit_timeout);     /* Seconds */
    /* 6. Exit */
    printf("Complete\n");
    pthread_mutex_destroy(&mutex);
    sem_destroy(&full);
    sem_destroy(&empty);
    return 0;
}

void usage(const char* prog_name) {
    printf("usage: %s <exit timeout> <#producer threads> <#consumer threads>\n", prog_name);
}

int insert_item(buffer_item item) {
    /* insert item into buffer
    return 0 if successful, otherwise
    return -1 indicating an error condition */

    int ret = sem_wait(&empty);

    if(ret != 0) return -1;
    pthread_mutex_lock(&mutex);
    buffer[front] = item;
    front = (front + 1) % BUFFER_SIZE;
    pthread_mutex_unlock(&mutex);

    ret = sem_post(&full);
    if(ret != 0) return -1;

    return 0;
}

int remove_item(buffer_item* item) {
    /* remove an object from buffer
    placing it in item
    return 0 if successful, otherwise
    return -1 indicating an error condition */

    int ret = sem_wait(&full);
    if(ret != 0) return -1;

    pthread_mutex_lock(&mutex);
    *item = buffer[back];
    buffer[back] = 0; /* Zerofill */
    back = (back + 1) % BUFFER_SIZE;
    pthread_mutex_unlock(&mutex);

    ret = sem_post(&empty);
    if(ret != 0) return -1;

    return 0;
}

void *producer(void *param) {
   buffer_item item;
   int delay;
   while (true) {
      /* sleep for a random period of time */
      delay = rand() % 5;
      sleep(delay);
      /* generate a random number */
      item = rand();

      if (insert_item(item))
         fprintf(stderr, "Producer insert_item failure.\n");
      else
         printf("producer produced %d\n",item);

   }
   return NULL;
}

void *consumer(void *param) {
   buffer_item item;
   int delay;
   while (true) {
      /* sleep for a random period of time */
      delay = rand() % 10;
      sleep(delay);

      if (remove_item(&item))
         fprintf(stderr, "Consumer remove_item failure. \n");
      else
         printf("consumer consumed %d\n",item);

   }
   return NULL;
}

    
